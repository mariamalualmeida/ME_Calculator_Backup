Voc√™ ser√° respons√°vel por desenvolver o sistema "ME empreendimentos", uma plataforma de an√°lise financeira e consultoria baseada em IA. O objetivo √© criar uma aplica√ß√£o web robusta, segura e amig√°vel, que permita aos usu√°rios (clientes banc√°rios, consultores) carregar documentos financeiros e receber an√°lises detalhadas, insights de risco e consultoria personalizada, com uma experi√™ncia de usu√°rio similar √† de um chatbot inteligente.

Vis√£o Geral do Sistema:

O sistema ser√° dividido em duas partes principais: um Backend (Python com API) e um Frontend (Interface Web), que se comunicar√£o de forma fluida. Uma Intelig√™ncia Artificial (IA Generativa - como Gemini/GPT) ser√° integrada no backend para racioc√≠nio e consultoria de alto n√≠vel.

1. Backend (Python com API)

Tecnologias Sugeridas:

Linguagem: Python 3.9+
Framework API: FastAPI (preferencial, por performance e async) ou Flask.
Gerenciamento de Depend√™ncias: pip com requirements.txt.
Bibliotecas de Processamento: pandas, pdfplumber, openpyxl, python-docx, Pillow, pytesseract, PyMuPDF (fitz), tabula-py, scipy, numpy, fuzzywuzzy (para fuzzy matching em categoriza√ß√£o).
Integra√ß√£o IA: SDKs oficiais da OpenAI (openai) ou Google (google-generativeai).
Funcionalidades Detalhadas (M√≥dulos de C√≥digo Fornecidos):

O c√≥digo Python para o core da an√°lise j√° foi desenvolvido e ser√° fornecido em m√≥dulos separados, seguindo a estrutura abaixo. Seu trabalho ser√° integr√°-los e exp√¥-los via API.

config.py: Configura√ß√µes globais (listas de sites de apostas, processadoras leg√≠timas, mapeamentos gen√©ricos).
file_io_utils.py:
Leitura de Arquivos: PDF, DOCX, XLSX, CSV, JPG, PNG.
OCR: Implementa OCR robusto para imagens e PDFs escaneados (com pytesseract/PyMuPDF).
Detec√ß√£o de Tipo/Banco: Infer√™ncia b√°sica do tipo de documento (extrato_bancario, fatura_cartao, contracheque) e do banco pelo nome do arquivo.
data_parsing.py:
Parsing Financeiro: Fun√ß√µes precisas para extrair e normalizar datas (parse_date_string) e valores monet√°rios (parse_financial_value) de diversas formata√ß√µes.
Extra√ß√£o de Dados Cadastrais: Identifica nome, CPF/CNPJ, endere√ßo, ag√™ncia, conta, etc.
Processamento de Contratacheque: Extrai dados de renda (bruta/l√≠quida), empresa, cargo.
bank_specific_parsers.py:
Parsers Plug√°veis de PDF/Texto: Cont√©m fun√ß√µes de extra√ß√£o otimizadas para layouts espec√≠ficos de PDFs de bancos (ex: parse_nubank_extrato_pdf, parse_c6_fatura_pdf).
Requisito: Deve ser facilmente extens√≠vel. A adi√ß√£o de um novo parser (parse_bancox_extrato.pdf) para um novo layout/banco n√£o deve exigir modifica√ß√£o no main.py ou em outros m√≥dulos centrais.
dataframe_parsers.py:
Parsers Plug√°veis de DataFrame: Cont√©m fun√ß√µes de extra√ß√£o para layouts espec√≠ficos de CSV/XLSX de bancos (ex: process_nubank_extrato_csv, process_caixa_extrato_csv).
Parser Gen√©rico de DataFrame: L√≥gica para inferir colunas (_mapear_colunas_automaticamente) e extrair transa√ß√µes de arquivos tabulares desconhecidos.
categorization_logic.py:
Categoriza√ß√£o Granular: Classifica cada transa√ß√£o em categorias de gasto/recebimento espec√≠ficas (ex: "Alimenta√ß√£o", "Lazer", "PIX Recebido", "Compras no Cart√£o"), utilizando dicion√°rios de palavras-chave e l√≥gica para diferenciar processadoras leg√≠timas de sites de aposta.
financial_analysis.py:
C√°lculos Financeiros: Soma total de entradas/sa√≠das, c√°lculo de saldo, agrupamento de transa√ß√µes por m√™s, c√°lculo de um "Score Financeiro" (calculate_score).
Extra√ß√£o de Maiores Transa√ß√µes: Identifica as top N transa√ß√µes de entrada e sa√≠da.
An√°lise de Risco/Comportamento:
Cheque Especial/Descoberto: Detec√ß√£o de uso e persist√™ncia de saldo negativo.
Uso do Limite de Cart√£o: Percentual de utiliza√ß√£o do limite.
Compras por Impulso: Identifica padr√µes de alto volume/baixa recorr√™ncia em categorias discricion√°rias.
Movimenta√ß√µes Circulares/Estrutura√ß√£o: Detec√ß√£o de recebimento e repasse no mesmo dia, ou m√∫ltiplas transa√ß√µes pequenas e sequenciais (riscos de fraude/lavagem).
Transa√ß√µes At√≠picas: Identifica transa√ß√µes em hor√°rios incomuns (madrugada).
Inconsist√™ncia Renda/Despesas: An√°lise da propor√ß√£o de sa√≠das em rela√ß√£o √†s entradas.
Detec√ß√£o de Apostas: Identifica transa√ß√µes com sites ou termos relacionados a jogos de azar, com filtragem de falsos positivos.
report_generation.py:
Gera√ß√£o de Resumos Estruturados: Cria DataFrames (para f√°cil convers√£o em JSON/Markdown) de resumos do extrato por categoria, resumo da fatura de cart√£o e um resumo financeiro geral consolidado. Inclui totais, percentuais e comparativos.
main.py (Orquestrador Principal):
Classe FinancialAnalysisSystem: Instancia e coordena o fluxo completo da an√°lise, gerenciando o estado (transa√ß√µes consolidadas, resultados).
Orquestra√ß√£o de Parsers: A FinancialAnalysisSystem deve conter a l√≥gica para chamar o parser espec√≠fico correto (do bank_specific_parsers.py ou dataframe_parsers.py) com base no doc_type, bank_name e file_type detectados. Se nenhum parser espec√≠fico for aplic√°vel ou falhar, deve haver um fallback para a extra√ß√£o por regex em texto bruto.
Consolida√ß√£o de Dados: Acumula transa√ß√µes e dados de m√∫ltiplos documentos carregados em DataFrames consolidados.
API Endpoints (FastAPI/Flask):

POST /api/auth/login: Autentica√ß√£o de usu√°rio.
POST /api/document/upload:
Recebe um ou m√∫ltiplos arquivos (multipart/form-data).
Chama FinancialAnalysisSystem.process_document() para cada arquivo.
Retorna um status: "processing" ou status: "success" para cada upload.
GET /api/analysis/results:
Retorna os resultados completos da an√°lise consolidados via FinancialAnalysisSystem.get_analysis_results(). Os dados devem ser retornados em formato JSON.
POST /api/analysis/query_ia:
Recebe os resultados da an√°lise (JSON) e uma pergunta do usu√°rio (texto).
Encaminha os dados e a pergunta para a IA (Gemini/GPT).
Retorna a resposta textual da IA.
GET /api/reports/download/{report_id}:
Endpoint para download de relat√≥rios PDF gerados no backend. O report_id pode ser um hash da sess√£o ou do relat√≥rio.
Seguran√ßa do Backend:

Autentica√ß√£o/Autoriza√ß√£o: Implementar login de usu√°rios (JWT recomendado). Acesso √† API deve ser restrito.
Valida√ß√£o de Entrada: Validar tipos e tamanhos de arquivos.
Tratamento de Erros: Respostas de erro claras para o frontend.
HTTPS: Essencial para comunica√ß√£o segura.
Gerenciamento de Segredos: Chaves de API de terceiros (IA) devem ser armazenadas de forma segura (vari√°veis de ambiente).
Limpeza de Sess√£o: Implementar l√≥gica para limpar dados de documentos ap√≥s um per√≠odo de inatividade ou logout.
2. Frontend (Interface Web)

Tecnologias Sugeridas:

Framework UI: React, Vue.js ou Angular (preferencial para SPA). Alternativamente, Jinja2/Flask Templates para uma solu√ß√£o mais integrada Python.
HTTP Client: Axios, Fetch API.
Layout e Comportamento (Experi√™ncia de IA Conversacional):

P√≥s-Login: O usu√°rio √© direcionado para uma tela que mimetiza um chat com uma IA.
Componentes Principais:
Header: T√≠tulo "Miguelita - Sua Assistente Financeira" e elementos de usu√°rio/logout.
√Årea de Conversa (Chat History):
Exibe mensagens do sistema (Miguelita) e do usu√°rio.
Upload de Arquivo (Visual): Quando o usu√°rio carrega um arquivo, ele aparece como uma "mensagem" do usu√°rio no chat (ex: "extrato.pdf carregado").
Resultados de An√°lise (Texto): O texto detalhado e os resumos retornados da API (/api/analysis/results) s√£o formatados e exibidos diretamente no chat usando Markdown (tabelas, listas, negrito).
Links para Download de PDF: Ap√≥s a an√°lise, a IA pode "enviar" uma mensagem com um link clic√°vel para baixar o relat√≥rio PDF (ex: <a> tag para /api/reports/download/{report_id}).
√Årea de Input (Parte Inferior):
Campo de Texto: Para o usu√°rio digitar perguntas ou comandos.
Bot√£o de Enviar: Para submeter o texto.
Bot√£o de Upload de Arquivos (Integrado): Um √≠cone de clipe de papel (üìé) ou similar, ao lado do campo de texto. Ao clicar, abre o explorador de arquivos. Permite m√∫ltiplos uploads simult√¢neos.
Fluxo de Intera√ß√£o do Usu√°rio:

Login: Usu√°rio acessa o app e faz login.
Tela da IA: Usu√°rio v√™ uma tela de chat limpa ou com uma sauda√ß√£o inicial da Miguelita.
Upload de Documentos:
Usu√°rio clica no bot√£o de upload e seleciona arquivos (ex: extrato.pdf, fatura.pdf).
Frontend envia os arquivos via POST /api/document/upload.
Backend processa (chama FinancialAnalysisSystem.process_document para cada um).
Frontend exibe "Documentos carregados, aguarde a an√°lise..."
An√°lise e Resposta Inicial:
Ap√≥s o processamento do backend, o frontend faz um GET /api/analysis/results.
A IA (no backend, via query_ia ou pr√©-processada) formata a resposta:
Sauda√ß√£o e confirma√ß√£o de processamento.
Detalhamento Completo das Transa√ß√µes (Extrato: Entradas/Sa√≠das por Categoria; Fatura: Compras/Cr√©ditos por Categoria), formatado em Markdown.
Resumos Consolidados (Extrato, Fatura, Geral) em Markdown.
An√°lises de Risco e Comportamento (Indicadores, Apostas, Suspeitas) em Markdown.
Score Financeiro Geral.
Menu de Op√ß√µes:
"1 - An√°lise da sa√∫de financeira e risco de concess√£o de cr√©dito e empr√©stimo."
"2 - Consultoria financeira personalizada para otimiza√ß√£o e recupera√ß√£o."
"Para qualquer outro tipo de informa√ß√£o, basta perguntar!"
Link para PDF: "Seu relat√≥rio completo em PDF est√° dispon√≠vel para download: Baixar Relat√≥rio PDF".
Intera√ß√£o Cont√≠nua:
Se usu√°rio digita "1": Frontend envia para query_ia com o comando "An√°lise de sa√∫de financeira...". Backend aciona a IA com os dados j√° processados para gerar a an√°lise focada em risco de cr√©dito.
Se usu√°rio digita "2": Similarmente, aciona a IA para consultoria de otimiza√ß√£o/recupera√ß√£o.
Se usu√°rio digita pergunta livre: IA responde diretamente.
Recomenda√ß√µes Adicionais:

Monitoramento: Logs detalhados no backend para depura√ß√£o e auditoria.
Cache: Estrat√©gias de cache para resultados de an√°lise, evitando reprocessar os mesmos arquivos desnecessariamente em uma sess√£o.
Testes: Testes unit√°rios para cada m√≥dulo e testes de integra√ß√£o para a API e o fluxo completo.
CI/CD: Pipelines de Integra√ß√£o Cont√≠nua/Entrega Cont√≠nua para automa√ß√£o de testes e deploy.